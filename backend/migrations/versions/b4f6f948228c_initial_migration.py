"""initial migration

Revision ID: b4f6f948228c
Revises: 
Create Date: 2025-03-22 00:24:07.910101

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b4f6f948228c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_contract_applications_id', table_name='contract_applications')
    op.drop_table('contract_applications')
    op.drop_index('ix_proposals_id', table_name='proposals')
    op.drop_table('proposals')
    op.drop_index('ix_statuses_id', table_name='statuses')
    op.drop_table('statuses')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_proposal_items_id', table_name='proposal_items')
    op.drop_table('proposal_items')
    op.drop_index('ix_contracts_id', table_name='contracts')
    op.drop_table('contracts')
    op.drop_index('ix_application_items_id', table_name='application_items')
    op.drop_table('application_items')
    op.drop_index('ix_devices_id', table_name='devices')
    op.drop_table('devices')
    op.drop_index('ix_clients_id', table_name='clients')
    op.drop_table('clients')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('clients_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('bin', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('legal_address', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('signatory', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='clients_pkey'),
    sa.UniqueConstraint('bin', name='clients_bin_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_clients_id', 'clients', ['id'], unique=False)
    op.create_table('devices',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('devices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('verification', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('calibration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('certification', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('department', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sector', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('verifier', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('internal_number', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('business_trip', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('technical_possibility', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('combinability', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('parameter', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('additional_conditions', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labels', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('technical_part_sum', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('uncertainty_calculation', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='devices_pkey'),
    sa.UniqueConstraint('internal_number', name='devices_internal_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_devices_id', 'devices', ['id'], unique=False)
    op.create_table('application_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('total', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['application_id'], ['contract_applications.id'], name='application_items_application_id_fkey'),
    sa.ForeignKeyConstraint(['status_id'], ['statuses.id'], name='application_items_status_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='application_items_pkey')
    )
    op.create_index('ix_application_items_id', 'application_items', ['id'], unique=False)
    op.create_table('contracts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('contracts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contract_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('validity_period', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('date_signed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='contracts_client_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='contracts_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='contracts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_contracts_id', 'contracts', ['id'], unique=False)
    op.create_table('proposal_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('proposal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('total', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], name='proposal_items_device_id_fkey'),
    sa.ForeignKeyConstraint(['proposal_id'], ['proposals.id'], name='proposal_items_proposal_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='proposal_items_pkey')
    )
    op.create_index('ix_proposal_items_id', 'proposal_items', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_table('statuses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='statuses_pkey')
    )
    op.create_index('ix_statuses_id', 'statuses', ['id'], unique=False)
    op.create_table('proposals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='proposals_client_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='proposals_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='proposals_pkey')
    )
    op.create_index('ix_proposals_id', 'proposals', ['id'], unique=False)
    op.create_table('contract_applications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('contract_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('application_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['contract_id'], ['contracts.id'], name='contract_applications_contract_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='contract_applications_pkey')
    )
    op.create_index('ix_contract_applications_id', 'contract_applications', ['id'], unique=False)
    # ### end Alembic commands ###
